{
  "name": "n8n-whatsapp-bot",
  "version": "1.0.0",
  "description": "SaaS Multi-Tenant con n8n, Telegram Bot, DeepSeek AI Agent, y MCP Server",
  "license": "MIT",
  "author": "Kike",
  "type": "commonjs",
  "main": "index.js",
  "scripts": {
    "start": "docker compose -f docker-compose.dev.yml up -d",
    "stop": "docker compose -f docker-compose.dev.yml down",
    "restart": "npm run stop && npm run start",
    "dev": "[ ! -f .env ] && cp .env.dev .env || true && docker compose -f docker-compose.dev.yml up -d --build postgres redis n8n-main n8n-worker pgadmin && bash scripts/post-docker-setup.sh && docker compose -f docker-compose.dev.yml up -d backend mcp-server frontend",
    "dev:fresh": "docker compose -f docker-compose.dev.yml down --volumes --remove-orphans && [ ! -f .env ] && cp .env.dev .env || true && docker compose -f docker-compose.dev.yml up -d --build postgres redis n8n-main n8n-worker pgadmin && bash scripts/post-docker-setup.sh && docker compose -f docker-compose.dev.yml up -d backend mcp-server frontend",
    "setup:n8n": "bash scripts/setup-n8n-owner.sh",
    "setup:apikey": "bash scripts/create-n8n-apikey.sh",
    "logs": "docker compose -f docker-compose.dev.yml logs -f",
    "logs:n8n": "docker compose -f docker-compose.dev.yml logs -f n8n-main",
    "logs:postgres": "docker compose -f docker-compose.dev.yml logs -f postgres",
    "logs:backend": "docker compose -f docker-compose.dev.yml logs -f backend",
    "logs:frontend": "docker compose -f docker-compose.dev.yml logs -f frontend",
    "logs:mcp": "docker compose -f docker-compose.dev.yml logs -f mcp-server",
    "logs:all": "docker compose -f docker-compose.dev.yml logs -f backend frontend mcp-server",
    "status": "docker compose -f docker-compose.dev.yml ps",
    "clean": "docker compose -f docker-compose.dev.yml down --volumes --remove-orphans && docker system prune -f",
    "clean:data": "docker compose -f docker-compose.dev.yml down --volumes --remove-orphans && sudo rm -rf ./data/postgres ./data/n8n ./data/pgadmin ./data/redis && docker system prune -f",
    "clean:tables": "docker exec postgres_db psql -U admin -d postgres -c \"DELETE FROM chatbot_credentials; DELETE FROM chatbot_config; DELETE FROM citas; DELETE FROM servicios_profesionales; DELETE FROM bloqueos_horarios; DELETE FROM horarios_profesionales; DELETE FROM servicios; DELETE FROM profesionales; DELETE FROM clientes; DELETE FROM usuarios; DELETE FROM historial_subscripciones; DELETE FROM subscripciones; DELETE FROM organizaciones; DELETE FROM metricas_uso_organizacion; SELECT 'Tablas limpiadas' as status;\"",
    "fresh:clean": "npm run clean:data && docker compose -f docker-compose.dev.yml up -d --build postgres redis n8n-main n8n-worker pgadmin && bash scripts/post-docker-setup.sh && docker compose -f docker-compose.dev.yml up -d backend mcp-server frontend",
    "backup:db": "docker exec postgres_db pg_dumpall -U admin > backup_$(date +%Y%m%d_%H%M%S).sql",
    "db:connect": "docker exec -it postgres_db psql -U admin -d postgres",
    "test:backend": "docker exec back npm test",
    "test:backend:watch": "docker exec -it back npm run test:watch",
    "test:backend:coverage": "docker exec back npm run test:coverage",
    "test:prepare": "npm run fresh:clean && echo '⏳ Esperando a que la BD esté lista...' && sleep 15",
    "test:full": "npm run test:prepare && npm run test:backend",
    "test:quick": "docker exec back npm test",
    "mcp:health": "curl -s http://localhost:3100/health | jq",
    "mcp:tools": "curl -s http://localhost:3100/mcp/tools | jq",
    "mcp:restart": "docker compose -f docker-compose.dev.yml restart mcp-server",
    "mcp:rebuild": "docker compose -f docker-compose.dev.yml build --no-cache mcp-server && docker compose -f docker-compose.dev.yml up -d mcp-server",
    "frontend:restart": "docker compose -f docker-compose.dev.yml restart frontend",
    "frontend:rebuild": "docker compose -f docker-compose.dev.yml build --no-cache frontend && docker compose -f docker-compose.dev.yml up -d frontend"
  },
  "keywords": [
    "n8n",
    "telegram",
    "saas",
    "multi-tenant",
    "deepseek",
    "ai",
    "mcp-server",
    "docker",
    "automation"
  ],
  "engines": {
    "node": ">=18.0.0",
    "docker": ">=20.0.0"
  }
}

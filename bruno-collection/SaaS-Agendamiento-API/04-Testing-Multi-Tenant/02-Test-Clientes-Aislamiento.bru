meta {
  name: 02 - Test Clientes Aislamiento
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/api/v1/clientes
  body: none
  auth: bearer
}

auth:bearer {
  token: {{managerBarberiaToken}}
}

headers {
  Content-Type: application/json
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Response should contain success true", function() {
    const body = res.getBody();
    expect(body).to.have.property('success', true);
  });

  test("Manager barber√≠a SOLO debe ver sus clientes", function() {
    const body = res.getBody();
    const clientes = body.data;

    // Verificar que todos los clientes pertenecen a la barber√≠a
    clientes.forEach(cliente => {
      expect(cliente.organizacion_id).to.equal(bru.getVar("barbariaOrgId"),
        `Cliente ${cliente.id} no pertenece a la organizaci√≥n correcta`);
    });

    // Debe tener exactamente 2 clientes (regular + VIP)
    expect(clientes.length).to.equal(2, "Barber√≠a debe tener exactamente 2 clientes");
  });

  test("Verificar emails √∫nicos POR organizaci√≥n", function() {
    const body = res.getBody();
    const clientes = body.data;

    const emails = clientes.map(c => c.email);
    const emailsUnicos = [...new Set(emails)];

    expect(emails.length).to.equal(emailsUnicos.length,
      "Emails deben ser √∫nicos dentro de la organizaci√≥n");

    console.log("üìß Emails de clientes barber√≠a:");
    clientes.forEach(cliente => {
      console.log(`  ‚Ä¢ ${cliente.nombre} ${cliente.apellidos}: ${cliente.email}`);
    });
  });

  test("Verificar referencias a profesionales v√°lidas", function() {
    const body = res.getBody();
    const clientes = body.data;

    const profesionalesValidos = [bru.getVar("barberoId"), bru.getVar("estilistaId")];

    clientes.forEach(cliente => {
      if (cliente.preferencias && cliente.preferencias.profesional_preferido) {
        expect(profesionalesValidos).to.include(cliente.preferencias.profesional_preferido,
          `Cliente ${cliente.id} tiene referencia a profesional inv√°lido`);
      }
    });

    console.log("üë• Referencias profesional preferido validadas:");
    clientes.forEach(cliente => {
      if (cliente.preferencias?.profesional_preferido) {
        const profId = cliente.preferencias.profesional_preferido;
        const tipo = profId === bru.getVar("barberoId") ? "Barbero" : "Estilista";
        console.log(`  ‚Ä¢ ${cliente.nombre}: ${tipo} (${profId})`);
      }
    });
  });

  test("Aislamiento multi-tenant clientes validado", function() {
    const body = res.getBody();
    console.log("üõ°Ô∏è AISLAMIENTO CLIENTES MULTI-TENANT:");
    console.log(`  ‚Ä¢ Total clientes barber√≠a: ${body.data.length}`);
    console.log(`  ‚Ä¢ Organizaci√≥n: ${bru.getVar("barbariaOrgId")}`);
    console.log("  ‚Ä¢ ‚úÖ Manager solo ve clientes de SU organizaci√≥n");
    console.log("  ‚Ä¢ ‚úÖ Referencias profesionales v√°lidas");
    console.log("  ‚Ä¢ ‚úÖ Emails √∫nicos por organizaci√≥n");
  });
}
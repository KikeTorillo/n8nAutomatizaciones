meta {
  name: 04 - Verificar Infraestructura Docker
  type: http
  seq: 4
}

get {
  url: {{baseUrl}}/api/v1/test/health-check
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminToken}}
}

headers {
  Content-Type: application/json
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Response should contain success true", function() {
    const body = res.getBody();
    expect(body).to.have.property('success', true);
  });

  test("Database connection should be healthy", function() {
    const body = res.getBody();
    expect(body.data).to.have.property('database');
    expect(body.data.database).to.have.property('status', 'connected');
  });

  test("Redis connection should be healthy", function() {
    const body = res.getBody();
    expect(body.data).to.have.property('redis');
    expect(body.data.redis).to.have.property('status', 'connected');
  });

  test("System uptime should be available", function() {
    const body = res.getBody();
    expect(body.data).to.have.property('uptime');
    expect(body.data.uptime).to.be.a('number');
  });

  test("Memory usage should be monitored", function() {
    const body = res.getBody();
    expect(body.data).to.have.property('memory');
    expect(body.data.memory).to.have.property('used');
    expect(body.data.memory).to.have.property('total');
  });

  test("Infraestructura Docker operativa", function() {
    // Si llegamos aquí, la infraestructura está funcionando
    console.log("✅ Backend Node.js ejecutándose correctamente");
    console.log("✅ Contenedores Docker operativos");
    console.log("✅ API REST respondiendo correctamente");
    console.log("✅ Sistema listo para operación");
  });
}
{
  "name": "Barberia",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "20a0b009-eb9b-44fc-bda9-4dffd8085f04",
              "name": "sender",
              "value": "={{ $json.message.from.id }}",
              "type": "string"
            },
            {
              "id": "6076cf73-bc7d-41d6-b053-c09611925c31",
              "name": "conversation",
              "value": "={{ $json.message.text }}",
              "type": "string"
            },
            {
              "id": "35f48ada-3625-40fa-93a4-414fe67cf8c2",
              "name": "sessionId",
              "value": "={{ $json.message.from.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        224,
        648
      ],
      "id": "8c09e529-04ed-464a-8a98-d4c6ccc54c66",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Redis1').item.json.propertyName.join(\" \") }}",
        "options": {
          "systemMessage": "Eres un asistente virtual inteligente para agendamiento de citas.\n\nFECHA Y HORA ACTUAL: {{ $now }}\nZONA HORARIA: America/Mexico_City (UTC-6)\n\n=== HERRAMIENTAS DISPONIBLES ===\n\nTienes acceso a 4 herramientas MCP para interactuar con el sistema:\n\n1. **listarServicios** - Lista servicios disponibles con precios y duración\n   Úsala para: Mostrar catálogo de servicios al cliente\n\n2. **verificarDisponibilidad** - Consulta horarios libres de un profesional\n   Parámetros: { profesional_id: number, fecha: \"DD/MM/YYYY\", duracion?: number }\n   Úsala para: Verificar si un horario está disponible ANTES de crear la cita\n\n3. **buscarCliente** - Busca cliente existente por teléfono o nombre\n   Parámetros: { busqueda: string, tipo?: \"telefono\"|\"nombre\"|\"auto\" }\n   Úsala para: Verificar si el cliente ya existe en el sistema\n\n4. **crearCita** - Crea una nueva cita en el sistema\n   Parámetros: {\n     fecha: \"DD/MM/YYYY\",\n     hora: \"HH:MM\",\n     profesional_id: number,\n     servicio_id: number,\n     cliente: { nombre: string, telefono: string, email?: string },\n     notas?: string\n   }\n   Úsala para: Confirmar y registrar la cita DESPUÉS de validar disponibilidad\n\n=== FLUJO DE AGENDAMIENTO ===\n\nCuando un cliente quiera agendar una cita, SIGUE ESTE PROCESO OBLIGATORIO:\n\n**PASO 1: RECOPILAR INFORMACIÓN**\n- Nombre del cliente (OBLIGATORIO)\n- Teléfono del cliente (OBLIGATORIO)\n- Servicio deseado (OBLIGATORIO)\n- Fecha preferida (OBLIGATORIO)\n- Hora preferida (OBLIGATORIO)\n- Profesional preferido (OPCIONAL)\n\n**PASO 2: USA \"listarServicios\"**\n- Si el cliente no sabe qué servicio quiere, muéstrale el catálogo\n- Obtén el servicio_id correcto\n\n**PASO 3: USA \"verificarDisponibilidad\"**\n- ANTES de crear la cita, verifica que el horario esté libre\n- Si está ocupado, sugiere 2-3 horarios alternativos\n- Si está libre, procede al Paso 4\n\n**PASO 4: USA \"crearCita\"**\n- Solo cuando tengas TODOS los datos y el horario esté CONFIRMADO disponible\n- Crea la cita con todos los parámetros requeridos\n- Informa al cliente el código de cita generado\n\n=== REGLAS IMPORTANTES ===\n\n1. **NUNCA crees una cita sin verificar disponibilidad primero**\n2. **SIEMPRE confirma los datos con el cliente antes de usar crearCita**\n3. **Usa buscarCliente para evitar duplicar clientes existentes**\n4. **Formatos de fecha/hora**:\n   - Fechas: DD/MM/YYYY (ejemplo: 24/10/2025)\n   - Horas: HH:MM en formato 24hrs (ejemplo: 14:30)\n5. **Si falta información, pregunta UNA SOLA VEZ de forma clara**\n6. **Sé amable, profesional y empático**\n7. **Confirma siempre el resultado de las operaciones al cliente**\n\nNOTA: Este prompt será reemplazado dinámicamente con información específica de cada organización."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1752,
        552
      ],
      "id": "494ead1f-a0eb-4757-aa6c-66357294ef50",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        1568,
        776
      ],
      "id": "64396f76-d4e1-4dde-ac25-ccd86a36b953",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "YooGNid9XSlOkutk",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        648
      ],
      "id": "833f6102-d3d9-4343-941a-03b1101f7d0d",
      "name": "Telegram Trigger",
      "webhookId": "283c4db9-3815-432c-a162-1d6f0909e82d",
      "credentials": {
        "telegramApi": {
          "id": "LhMMEjxpuGbI2Tzr",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2288,
        552
      ],
      "id": "6b9faae4-9a84-4483-964f-a8135e4400ec",
      "name": "Send a text message",
      "webhookId": "fae227d9-91cb-4d40-832e-2c2bbb1e5a46",
      "credentials": {
        "telegramApi": {
          "id": "LhMMEjxpuGbI2Tzr",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $json.sender }}",
        "messageData": "={{ $json.conversation }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        448,
        648
      ],
      "id": "5a148343-ce3e-4970-ad0c-3f4b94c5d110",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "lK3efK3XbFHkQ8qh",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        672,
        648
      ],
      "id": "dad41563-84a5-4424-babf-4fe3f6ba05e7",
      "name": "Wait",
      "webhookId": "ff194028-6953-4cea-9cda-4c009d3a687c"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $('Redis').item.json.sender }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        896,
        648
      ],
      "id": "23efc434-9d91-4506-9107-cab538a404f5",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "lK3efK3XbFHkQ8qh",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2d3b75ea-f4d4-4b04-a981-5b6d7ed3c795",
              "leftValue": "={{ $json.propertyName.last() }}",
              "rightValue": "={{ $('Redis').item.json.conversation }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1120,
        648
      ],
      "id": "acaa19a0-b160-49fe-a3b0-5e0f063b1d4b",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1344,
        744
      ],
      "id": "cd378047-bc43-4cb8-abef-72139b8155eb",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Redis').item.json.sender }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1344,
        552
      ],
      "id": "5af81fd0-a943-48f3-9805-c79bfc4ff19b",
      "name": "Redis2",
      "credentials": {
        "redis": {
          "id": "lK3efK3XbFHkQ8qh",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Redis').item.json.sender }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1696,
        776
      ],
      "id": "3c50f264-a855-4fea-a3ea-939cf816c283",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "KrG1bg3Af0MIkDSF",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "serverUrl": "http://mcp-server:3100",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        1824,
        776
      ],
      "id": "20320aa8-3d42-4cbf-8407-8f58a170fcd5",
      "name": "MCP Client - All Tools"
    }
  ],
  "pinData": {},
  "connections": {
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "ai_tool": [
        []
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Redis2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client - All Tools": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a8cbabe8-5830-440a-8455-6606f983b5c9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3127f192473f4bcdfd94806d2c9f27e5a2170784cab00841df809ea728a42963"
  },
  "id": "tb2cITOPUi4dacpb",
  "tags": []
}
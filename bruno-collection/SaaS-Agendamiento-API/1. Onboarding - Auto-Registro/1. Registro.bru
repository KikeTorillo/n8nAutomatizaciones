meta {
  name: 1. Registro
  type: http
  seq: 1
}

post {
  url: {{baseUrl}}/api/{{apiVersion}}/organizaciones/register
  body: json
  auth: none
}

body:json {
  {
    "organizacion": {
      "nombre_comercial": "Barbería Clásica",
      "razon_social": "Barbería Clásica S.A.",
      "rfc": "BCC123456789",
      "tipo_industria": "barberia",
      "plan": "basico",
      "telefono_principal": "+5491198765432",
      "email_contacto": "contacto@barberiaclasica.com"
    },
    "admin": {
      "nombre": "Carlos",
      "apellidos": "González",
      "email": "carlos@barberiaclasica.com",
      "password": "Password123!",
      "telefono": "+5491198765432"
    },
    "aplicar_plantilla_servicios": true,
    "enviar_email_bienvenida": false
  }
}

tests {
  test("Status 201 Created", function() {
    expect(res.status).to.equal(201);
  });

  test("Response contiene organización", function() {
    expect(res.body.data).to.have.property("organizacion");
    expect(res.body.data.organizacion).to.have.property("id");
    expect(res.body.data.organizacion).to.have.property("nombre_comercial");
  });

  test("Response contiene admin con token", function() {
    expect(res.body.data).to.have.property("admin");
    expect(res.body.data.admin).to.have.property("token");
    expect(res.body.data.admin).to.have.property("email");
  });

  test("Plantillas de servicios aplicadas", function() {
    expect(res.body.data).to.have.property("servicios_creados");
    expect(res.body.data.servicios_creados).to.be.a("number");
  });

  // Guardar variables automáticamente
  if (res.status === 201) {
    bru.setEnvVar("token", res.body.data.admin.token);
    bru.setEnvVar("organizacionId", res.body.data.organizacion.id);
    bru.setEnvVar("userId", res.body.data.admin.id);
  }
}

docs {
  # Paso 1: Auto-Registro de Organización (Patrón SaaS)

  **Endpoint Público** - Self-service signup para nuevos clientes.

  ## Flujo interno:
  1. Crea la organización con el plan básico
  2. Crea subscripción activa automáticamente
  3. Crea usuario admin con `email_verificado: true`
  4. Genera JWT token automáticamente (auto-login)
  5. Aplica plantillas de servicios según tipo de industria (opcional)

  ## Request:
  - `organizacion`: Datos de la nueva organización
    - `nombre_comercial` (requerido): Nombre del negocio
    - `tipo_industria` (requerido): barberia, salon_belleza, spa, etc.
    - `plan` (opcional): basico (default), profesional, empresarial
    - `razon_social`, `rfc`, `telefono_principal`, `email_contacto` (opcionales)

  - `admin`: Datos del usuario propietario
    - `nombre`, `apellidos`, `email`, `password` (requeridos)
    - `telefono` (opcional)

  - `aplicar_plantilla_servicios` (opcional): true (default) - Crea servicios predefinidos
  - `enviar_email_bienvenida` (opcional): false (default)

  ## Response:
  - `organizacion`: Datos completos de la organización creada
  - `admin`: Usuario creado con JWT token
    - `token`: JWT para autenticación inmediata
  - `servicios_creados`: Cantidad de servicios de plantilla aplicados

  ## Variables guardadas automáticamente:
  - `token` - JWT del usuario admin (para siguientes requests)
  - `organizacionId` - ID de la organización creada
  - `userId` - ID del usuario admin

  ## Seguridad:
  - Rate limiting: 3 registros máximo por IP cada 15 minutos
  - Email único: No permite duplicados
  - Password fuerte: Mínimo 8 caracteres con mayúscula, minúscula y número

  ## Uso:
  Ejecuta este request para crear una nueva organización desde cero.
  El token se guarda automáticamente para usar en los siguientes pasos del onboarding.
}

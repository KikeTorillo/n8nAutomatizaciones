# =========================================
# Multi-stage Dockerfile para Frontend React + Vite
# Modo: Producción con Nginx
# Stage 1: Build (Node) - Stage 2: Runtime (Nginx)
# =========================================

# ========== STAGE 1: BUILD ==========
FROM node:22-alpine AS builder

WORKDIR /app

# Copiar archivos de dependencias primero (mejor cache)
COPY package*.json ./

# Instalar todas las dependencias (necesarias para build)
RUN npm ci

# Copiar código fuente
COPY . .

# Build de producción (genera carpeta /app/dist)
# Vite optimiza y minifica automáticamente
RUN npm run build

# ========== STAGE 2: RUNTIME ==========
FROM nginx:alpine AS runtime

# Metadata
LABEL maintainer="SaaS Agendamiento"
LABEL version="1.0"
LABEL description="Frontend React+Vite en producción con Nginx"

# Copiar archivos compilados desde stage builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar configuración personalizada de nginx
COPY nginx.conf /etc/nginx/nginx.conf

# La imagen nginx:alpine ya tiene usuario 'nginx' (uid:gid = 101:101)
# Dar permisos correctos a ese usuario existente
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chmod -R 755 /usr/share/nginx/html && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Cambiar a usuario no-root (nginx ya existe en la imagen)
USER nginx

# Exponer puerto
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1

# Nginx en foreground
CMD ["nginx", "-g", "daemon off;"]

meta {
  name: Buscar Cliente por Teléfono
  type: http
  seq: 1
}

get {
  url: {{baseUrl}}/api/{{apiVersion}}/clientes/buscar-por-telefono?telefono=+5491112345678&organizacion_id={{organizacionId}}
  body: none
  auth: none
}

tests {
  test("Status 200 o 404 - Búsqueda ejecutada", function() {
    expect([200, 404]).to.include(res.status);
  });

  test("Si encuentra cliente, retorna datos completos", function() {
    if (res.status === 200) {
      expect(res.body.data).to.have.property('id');
      expect(res.body.data).to.have.property('nombre');
      expect(res.body.data).to.have.property('telefono');
      bru.setEnvVar("clienteId", res.body.data.id);
    }
  });

  test("Si no encuentra, retorna 404", function() {
    if (res.status === 404) {
      expect(res.body).to.have.property('success');
      expect(res.body.success).to.equal(false);
    }
  });
}

docs {
  # Buscar Cliente por Teléfono (WhatsApp)

  Busca si un cliente ya existe en la base de datos por su número de teléfono. Usado al inicio de la conversación de WhatsApp para identificar si es un cliente recurrente o nuevo.

  ## Query Parameters:
  - `telefono` (string, required) - Número de teléfono en formato internacional (ej: +5491112345678)
  - `organizacion_id` (integer, required) - ID de la organización

  ## IMPORTANTE:
  - **SIN AUTENTICACIÓN JWT** - Este endpoint NO requiere token
  - Validación por `organizacion_id` en query params
  - RLS asegura aislamiento de datos por organización

  ## Respuesta si Encuentra (200):
  ```json
  {
    "success": true,
    "data": {
      "id": 1,
      "nombre": "Juan Pérez",
      "telefono": "+5491112345678",
      "email": "juan.perez@example.com",
      "organizacion_id": 1,
      "citas_previas": 5
    }
  }
  ```

  ## Respuesta si NO Encuentra (404):
  ```json
  {
    "success": false,
    "message": "Cliente no encontrado con ese teléfono"
  }
  ```

  ## Flujo en n8n:
  1. Cliente envía mensaje a WhatsApp
  2. n8n extrae número de teléfono
  3. Llama a este endpoint para buscar cliente
  4. Si existe: saluda con nombre y muestra historial
  5. Si NO existe: solicita nombre para crear cuenta
}

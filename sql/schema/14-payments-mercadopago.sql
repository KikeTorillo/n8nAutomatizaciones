-- ====================================================================
-- üí≥ SISTEMA DE PAGOS - INTEGRACI√ìN MERCADO PAGO
-- ====================================================================
--
-- Este archivo gestiona el sistema completo de pagos a trav√©s de Mercado Pago:
-- ‚Ä¢ Tabla `pagos`: Registro de todos los pagos procesados
-- ‚Ä¢ Tabla `metodos_pago`: M√©todos de pago guardados (PCI Compliant)
--
-- üéØ ARQUITECTURA:
-- ‚Ä¢ Idempotencia garantizada (UNIQUE en payment_id_mp)
-- ‚Ä¢ RLS completo para multi-tenancy
-- ‚Ä¢ PCI Compliance: Solo √∫ltimos 4 d√≠gitos de tarjeta
-- ‚Ä¢ Integraci√≥n con tabla `subscripciones` existente
--
-- üîÑ ORDEN DE EJECUCI√ìN: #14 (Despu√©s de subscripciones)
-- üîí SEGURIDAD: RLS habilitado + validaci√≥n de webhooks en backend
-- ====================================================================

-- ====================================================================
-- üìä TABLA PAGOS - REGISTRO DE TRANSACCIONES MERCADO PAGO
-- ====================================================================
-- Registra todos los pagos procesados por Mercado Pago.
-- Fuente de verdad para conciliaci√≥n y auditor√≠a financiera.
-- ====================================================================

CREATE TABLE pagos (
    -- üîë CLAVE PRIMARIA
    id SERIAL PRIMARY KEY,

    -- üè¢ RELACI√ìN MULTI-TENANT
    organizacion_id INTEGER NOT NULL REFERENCES organizaciones(id) ON DELETE CASCADE,

    -- ====================================================================
    -- üí≥ SECCI√ìN: IDENTIFICADORES MERCADO PAGO
    -- ====================================================================
    payment_id_mp VARCHAR(100) UNIQUE NOT NULL,          -- ID √∫nico del pago en MP (idempotencia)
    subscription_id_mp VARCHAR(100),                     -- ID de suscripci√≥n en MP (si aplica)

    -- ====================================================================
    -- üí∞ SECCI√ìN: DETALLES DEL PAGO
    -- ====================================================================
    monto DECIMAL(10,2) NOT NULL,
    moneda VARCHAR(3) DEFAULT 'MXN',

    -- Estados: 'approved', 'rejected', 'pending', 'refunded', 'cancelled', 'in_process'
    estado VARCHAR(20) NOT NULL,

    -- Tipos: 'subscription', 'upgrade', 'downgrade', 'manual', 'one_time'
    tipo_pago VARCHAR(30),

    -- ====================================================================
    -- üé¥ SECCI√ìN: M√âTODO DE PAGO
    -- ====================================================================
    payment_method_id VARCHAR(50),                       -- 'visa', 'mastercard', 'oxxo', 'spei', etc.
    payment_type_id VARCHAR(30),                         -- 'credit_card', 'debit_card', 'ticket', 'bank_transfer'

    -- Motivo de rechazo (si aplica)
    status_detail VARCHAR(100),                          -- 'cc_rejected_bad_filled_card_number', etc.

    -- ====================================================================
    -- üìã SECCI√ìN: METADATA Y REFERENCIAS
    -- ====================================================================
    external_reference VARCHAR(100),                     -- Formato: org_{organizacion_id}_{timestamp}
    metadata JSONB DEFAULT '{}',                         -- Datos adicionales de MP

    -- ====================================================================
    -- üìÖ SECCI√ìN: FECHAS
    -- ====================================================================
    fecha_pago TIMESTAMPTZ,                              -- Fecha de creaci√≥n del pago en MP
    fecha_aprobacion TIMESTAMPTZ,                        -- Fecha de aprobaci√≥n (si fue aprobado)

    -- ====================================================================
    -- ‚è∞ SECCI√ìN: AUDITOR√çA
    -- ====================================================================
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,

    -- ====================================================================
    -- ‚úÖ SECCI√ìN: VALIDACIONES
    -- ====================================================================
    CONSTRAINT valid_monto_pago
        CHECK (monto >= 0),
    CONSTRAINT valid_estado_pago
        CHECK (estado IN ('approved', 'rejected', 'pending', 'refunded', 'cancelled', 'in_process', 'charged_back')),
    CONSTRAINT valid_tipo_pago
        CHECK (tipo_pago IS NULL OR tipo_pago IN ('subscription', 'upgrade', 'downgrade', 'manual', 'one_time'))
);

-- ====================================================================
-- üíæ TABLA METODOS_PAGO - INFORMACI√ìN DE TARJETAS (PCI COMPLIANT)
-- ====================================================================
-- Almacena solo informaci√≥n segura de m√©todos de pago.
-- NUNCA guarda n√∫meros de tarjeta completos, CVV o datos sensibles.
-- ====================================================================

CREATE TABLE metodos_pago (
    -- üîë CLAVE PRIMARIA
    id SERIAL PRIMARY KEY,

    -- üè¢ RELACI√ìN MULTI-TENANT
    organizacion_id INTEGER NOT NULL REFERENCES organizaciones(id) ON DELETE CASCADE,

    -- ====================================================================
    -- üí≥ SECCI√ìN: INFO MERCADO PAGO
    -- ====================================================================
    customer_id_mp VARCHAR(100),                         -- ID del customer en Mercado Pago
    payment_method_id_mp VARCHAR(100),                   -- ID del m√©todo de pago en MP
    card_id_mp VARCHAR(100),                             -- ID de la tarjeta en MP

    -- ====================================================================
    -- üé¥ SECCI√ìN: INFO DE LA TARJETA (SOLO DATOS SEGUROS)
    -- ====================================================================
    -- ‚ö†Ô∏è PCI COMPLIANCE: Solo √∫ltimos 4 d√≠gitos
    card_last_digits VARCHAR(4),                         -- √öltimos 4 d√≠gitos (ej: "4242")
    card_brand VARCHAR(30),                              -- 'visa', 'mastercard', 'amex', 'carnet'
    card_holder_name VARCHAR(100),                       -- Nombre del titular

    -- Vencimiento
    expiration_month INTEGER CHECK (expiration_month >= 1 AND expiration_month <= 12),
    expiration_year INTEGER CHECK (expiration_year >= 2025),

    -- ====================================================================
    -- üéõÔ∏è SECCI√ìN: ESTADO Y CONTROL
    -- ====================================================================
    activo BOOLEAN DEFAULT TRUE,
    es_principal BOOLEAN DEFAULT FALSE,                  -- Solo un m√©todo puede ser principal

    -- ====================================================================
    -- ‚è∞ SECCI√ìN: AUDITOR√çA
    -- ====================================================================
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,

    -- ====================================================================
    -- ‚úÖ SECCI√ìN: CONSTRAINTS
    -- ====================================================================
    -- Solo un m√©todo principal por organizaci√≥n
    CONSTRAINT unique_principal_per_org
        EXCLUDE (organizacion_id WITH =, es_principal WITH =)
        WHERE (es_principal = TRUE)
);

-- ====================================================================
-- üìä √çNDICES ESPECIALIZADOS
-- ====================================================================

-- TABLA: pagos
CREATE INDEX idx_pagos_organizacion ON pagos(organizacion_id);
CREATE INDEX idx_pagos_payment_mp ON pagos(payment_id_mp);
CREATE INDEX idx_pagos_subscription_mp ON pagos(subscription_id_mp) WHERE subscription_id_mp IS NOT NULL;
CREATE INDEX idx_pagos_estado ON pagos(estado);
CREATE INDEX idx_pagos_fecha ON pagos(fecha_pago DESC NULLS LAST);
CREATE INDEX idx_pagos_external_ref ON pagos(external_reference);
CREATE INDEX idx_pagos_tipo ON pagos(tipo_pago) WHERE tipo_pago IS NOT NULL;

-- √çndice covering para queries comunes (listado de pagos por org)
CREATE INDEX idx_pagos_org_covering ON pagos(organizacion_id, fecha_pago DESC)
    INCLUDE (payment_id_mp, monto, estado, tipo_pago);

-- TABLA: metodos_pago
CREATE INDEX idx_metodos_pago_org ON metodos_pago(organizacion_id);
CREATE INDEX idx_metodos_pago_activo ON metodos_pago(organizacion_id, activo) WHERE activo = TRUE;
CREATE INDEX idx_metodos_pago_principal ON metodos_pago(organizacion_id) WHERE es_principal = TRUE;
CREATE INDEX idx_metodos_pago_customer_mp ON metodos_pago(customer_id_mp) WHERE customer_id_mp IS NOT NULL;

-- ====================================================================
-- üîÑ TRIGGERS AUTOM√ÅTICOS
-- ====================================================================

-- Trigger para actualizar updated_at en pagos
CREATE TRIGGER update_pagos_updated_at
    BEFORE UPDATE ON pagos
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

-- Trigger para actualizar updated_at en metodos_pago
CREATE TRIGGER update_metodos_pago_updated_at
    BEFORE UPDATE ON metodos_pago
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

-- ====================================================================
-- üõ°Ô∏è ROW LEVEL SECURITY (RLS) - MULTI-TENANCY
-- ====================================================================

-- Habilitar RLS en ambas tablas
ALTER TABLE pagos ENABLE ROW LEVEL SECURITY;
ALTER TABLE metodos_pago ENABLE ROW LEVEL SECURITY;

-- ====================================================================
-- POL√çTICAS RLS: pagos
-- ====================================================================

-- Pol√≠tica SELECT: Los usuarios solo ven pagos de su organizaci√≥n
CREATE POLICY pagos_select_policy ON pagos
    FOR SELECT
    USING (organizacion_id = current_setting('rls.organizacion_id', true)::integer);

-- Pol√≠tica INSERT: Solo se pueden insertar pagos de la propia organizaci√≥n
CREATE POLICY pagos_insert_policy ON pagos
    FOR INSERT
    WITH CHECK (organizacion_id = current_setting('rls.organizacion_id', true)::integer);

-- Pol√≠tica UPDATE: Solo se pueden actualizar pagos de la propia organizaci√≥n
-- CORRECCI√ìN: Necesaria para que webhooks puedan actualizar estado de pagos
CREATE POLICY pagos_update_policy ON pagos
    FOR UPDATE
    USING (organizacion_id = current_setting('rls.organizacion_id', true)::integer)
    WITH CHECK (organizacion_id = current_setting('rls.organizacion_id', true)::integer);

-- ====================================================================
-- POL√çTICAS RLS: metodos_pago
-- ====================================================================

-- Pol√≠tica SELECT: Los usuarios solo ven m√©todos de pago de su organizaci√≥n
CREATE POLICY metodos_pago_select_policy ON metodos_pago
    FOR SELECT
    USING (organizacion_id = current_setting('rls.organizacion_id', true)::integer);

-- Pol√≠tica INSERT: Solo se pueden insertar m√©todos de la propia organizaci√≥n
CREATE POLICY metodos_pago_insert_policy ON metodos_pago
    FOR INSERT
    WITH CHECK (organizacion_id = current_setting('rls.organizacion_id', true)::integer);

-- Pol√≠tica UPDATE: Solo se pueden actualizar m√©todos de la propia organizaci√≥n
CREATE POLICY metodos_pago_update_policy ON metodos_pago
    FOR UPDATE
    USING (organizacion_id = current_setting('rls.organizacion_id', true)::integer)
    WITH CHECK (organizacion_id = current_setting('rls.organizacion_id', true)::integer);

-- Pol√≠tica DELETE: Solo se pueden eliminar m√©todos de la propia organizaci√≥n
CREATE POLICY metodos_pago_delete_policy ON metodos_pago
    FOR DELETE
    USING (organizacion_id = current_setting('rls.organizacion_id', true)::integer);

-- ====================================================================
-- üìù COMENTARIOS PARA DOCUMENTACI√ìN
-- ====================================================================

-- Tabla pagos
COMMENT ON TABLE pagos IS 'Registro de todos los pagos procesados por Mercado Pago';
COMMENT ON COLUMN pagos.payment_id_mp IS 'ID √∫nico del pago en Mercado Pago (garantiza idempotencia)';
COMMENT ON COLUMN pagos.subscription_id_mp IS 'ID de la suscripci√≥n en Mercado Pago (si el pago es recurrente)';
COMMENT ON COLUMN pagos.external_reference IS 'Formato: org_{organizacion_id}_{timestamp} - Permite vincular pago con organizaci√≥n en webhooks';
COMMENT ON COLUMN pagos.estado IS 'Estados posibles: approved, rejected, pending, refunded, cancelled, in_process, charged_back';
COMMENT ON COLUMN pagos.tipo_pago IS 'Tipo de pago: subscription (recurrente), upgrade, downgrade, manual, one_time';
COMMENT ON COLUMN pagos.metadata IS 'Datos adicionales retornados por Mercado Pago (JSON completo del pago)';

-- Tabla metodos_pago
COMMENT ON TABLE metodos_pago IS 'M√©todos de pago de organizaciones (PCI Compliant - solo √∫ltimos 4 d√≠gitos)';
COMMENT ON COLUMN metodos_pago.card_last_digits IS '√öltimos 4 d√≠gitos de la tarjeta (PCI Safe)';
COMMENT ON COLUMN metodos_pago.customer_id_mp IS 'ID del customer en Mercado Pago';
COMMENT ON COLUMN metodos_pago.card_id_mp IS 'ID de la tarjeta guardada en Mercado Pago';
COMMENT ON COLUMN metodos_pago.es_principal IS 'Solo un m√©todo puede ser principal por organizaci√≥n (EXCLUDE constraint)';

-- ====================================================================
-- ‚úÖ VERIFICACI√ìN DE INSTALACI√ìN
-- ====================================================================

-- Verificar que las tablas fueron creadas
DO $$
BEGIN
    RAISE NOTICE '‚úÖ Tablas de pagos creadas exitosamente:';
    RAISE NOTICE '   ‚îú‚îÄ‚îÄ pagos (registro de transacciones)';
    RAISE NOTICE '   ‚îî‚îÄ‚îÄ metodos_pago (m√©todos guardados - PCI Compliant)';
    RAISE NOTICE '';
    RAISE NOTICE 'üîí Seguridad configurada:';
    RAISE NOTICE '   ‚îú‚îÄ‚îÄ RLS habilitado en ambas tablas';
    RAISE NOTICE '   ‚îú‚îÄ‚îÄ Pol√≠ticas SELECT/INSERT/UPDATE/DELETE creadas';
    RAISE NOTICE '   ‚îî‚îÄ‚îÄ Idempotencia garantizada (UNIQUE en payment_id_mp)';
    RAISE NOTICE '';
    RAISE NOTICE 'üìä √çndices optimizados:';
    RAISE NOTICE '   ‚îú‚îÄ‚îÄ 8 √≠ndices en tabla pagos';
    RAISE NOTICE '   ‚îî‚îÄ‚îÄ 4 √≠ndices en tabla metodos_pago';
END $$;

services:
  # Base de datos PostgreSQL compartida
  postgres:
    image: postgres:17-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ}
      # Variables para contraseñas de usuarios específicos
      SAAS_APP_PASSWORD: ${SAAS_APP_PASSWORD}
      N8N_APP_PASSWORD: ${N8N_APP_PASSWORD}
      EVOLUTION_APP_PASSWORD: ${EVOLUTION_APP_PASSWORD}
      READONLY_USER_PASSWORD: ${READONLY_USER_PASSWORD}
      INTEGRATION_USER_PASSWORD: ${INTEGRATION_USER_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
      - ./sql:/docker-entrypoint-initdb.d/sql
    ports:
      - "5432:5432"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d postgres && psql -U admin -d postgres -c 'SELECT 1 FROM usuarios LIMIT 1;' > /dev/null 2>&1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  redis:
    image: redis:7
    container_name: n8n-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Servicio n8n con PostgreSQL
  n8n-main:
    image: n8nio/n8n:stable
    container_name: n8n-main
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5678:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: n8n_db
      DB_POSTGRESDB_USER: n8n_app
      DB_POSTGRESDB_PASSWORD: ${N8N_APP_PASSWORD}
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      EXECUTIONS_MODE: "queue"
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_RUNNERS_ENABLED: true
      OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: true
      N8N_HOST: 0.0.0.0
      WEBHOOK_URL: ${WEBHOOK_URL}
      N8N_EDITOR_BASE_URL: ${N8N_EDITOR_BASE_URL}
      GENERIC_TIMEZONE: ${TZ}
      TZ: ${TZ}
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - backend_network
  
  n8n-worker:
    image: n8nio/n8n:stable
    container_name: n8n-worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["worker", "concurrency=20"]
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: n8n_db
      DB_POSTGRESDB_USER: n8n_app
      DB_POSTGRESDB_PASSWORD: ${N8N_APP_PASSWORD}
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      EXECUTIONS_MODE: "queue"
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_RUNNERS_ENABLED: true
      OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: true
      # N8N_SECURE_COOKIE: false
      N8N_HOST: 0.0.0.0
      WEBHOOK_URL: ${WEBHOOK_URL}
      N8N_EDITOR_BASE_URL: ${N8N_EDITOR_BASE_URL}
      GENERIC_TIMEZONE: ${TZ}
      TZ: ${TZ}
      N8N_WORKER_MODE: true
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - backend_network

  # Evolution API v2 con PostgreSQL
  evolution_api:
    container_name: evolution_api
    image: atendai/evolution-api
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8080"
    environment:
      DATABASE_ENABLED: "true"
      DATABASE_PROVIDER: postgresql
      DATABASE_CONNECTION_URI: "postgresql://evolution_app:${EVOLUTION_APP_PASSWORD}@postgres:5432/evolution_db"
      AUTHENTICATION_API_KEY: ${AUTHENTICATION_API_KEY}
      SERVER_URL: ${SERVER_URL}
      DEL_INSTANCE: "false"
      CACHE_REDIS_ENABLED: "false"            # Opcional: habilitar Redis si se necesita
      CONFIG_SESSION_PHONE_VERSION: "${CONFIG_SESSION_PHONE_VERSION}"
    volumes:
      - ./data/evolution:/evolution/instances
    networks:
      - backend_network

  # pgAdmin para administrar PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8001:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    networks:
      - backend_network
  
  backend:
    build:
      context: ./backend/app
      dockerfile: dockerfile.dev
    container_name: back
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgadmin:
        condition: service_started
    # Agregar comando que espere antes de iniciar
    command: ["sh", "-c", "sleep 10 && npm run dev"]
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}

      N8N_DB_HOST: ${N8N_DB_HOST}
      N8N_DB_PORT: ${N8N_DB_PORT}
      N8N_DB_NAME: ${N8N_DB_NAME}
      N8N_DB_USER: ${N8N_DB_USER}
      N8N_DB_PASSWORD: ${N8N_DB_PASSWORD}

      EVOLUTION_DB_HOST: ${EVOLUTION_DB_HOST}
      EVOLUTION_DB_PORT: ${EVOLUTION_DB_PORT}
      EVOLUTION_DB_NAME: ${EVOLUTION_DB_NAME}
      EVOLUTION_DB_USER: ${EVOLUTION_DB_USER}
      EVOLUTION_DB_PASSWORD: ${EVOLUTION_DB_PASSWORD}

      CHAT_DB_HOST: ${CHAT_DB_HOST}
      CHAT_DB_PORT: ${CHAT_DB_PORT}
      CHAT_DB_NAME: ${CHAT_DB_NAME}
      CHAT_DB_USER: ${CHAT_DB_USER}
      CHAT_DB_PASSWORD: ${CHAT_DB_PASSWORD}

      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      LOG_LEVEL: ${LOG_LEVEL}

      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}

      N8N_API_KEY: ${N8N_API_KEY}
      N8N_API_URL: ${N8N_API_URL}

      DEEPSEEKAPIKEY: ${DEEPSEEKAPIKEY}
      SKIP_TELEGRAM_VALIDATION: ${SKIP_TELEGRAM_VALIDATION}

      CORS_ORIGIN: ${CORS_ORIGIN}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ./backend/app:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - backend_network
    ports:
      - "3000:3000"

  # ========================================
  # MCP SERVER - Herramientas para AI Agent
  # ========================================
  mcp-server:
    build:
      context: ./backend/mcp-server
      dockerfile: Dockerfile
    container_name: mcp-server
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
      postgres:
        condition: service_healthy
    ports:
      - "3100:3100"
    environment:
      # Configuración del servidor
      - NODE_ENV=production
      - MCP_PORT=3100

      # Conexión con Backend API
      - BACKEND_API_URL=http://back:3000
      - BACKEND_TIMEOUT=10000
      - MCP_JWT_TOKEN=${MCP_JWT_TOKEN}

      # Logging
      - LOG_LEVEL=info
    networks:
      - backend_network
    volumes:
      - ./backend/mcp-server:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Configuración de redes
networks:
  backend_network:
    driver: bridge
meta {
  name: 11 - Test Auth (Development)
  type: http
  seq: 11
}

get {
  url: {{baseUrl}}/api/v1/auth/test-auth
  body: none
  auth: none
}

headers {
  Authorization: Bearer {{accessToken}}
}

vars:post-response {
  authWorking: res.body.success
  userInfo: res.body.user
  tenantInfo: res.body.tenant
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Should confirm authentication is working", function() {
    expect(res.getBody()).to.have.property('success');
    expect(res.getBody().success).to.be.true;
  });

  test("Should return user information", function() {
    expect(res.getBody()).to.have.property('user');
    const user = res.getBody().user;
    expect(user).to.have.property('id');
    expect(user).to.have.property('email');
    expect(user).to.have.property('rol');
  });

  test("Should return tenant information", function() {
    expect(res.getBody()).to.have.property('tenant');
    const tenant = res.getBody().tenant;
    if (tenant) {
      expect(tenant).to.have.property('organizacion_id');
    }
  });

  test("Should have helpful message", function() {
    expect(res.getBody()).to.have.property('message');
    expect(res.getBody().message).to.include('Autenticación funcionando correctamente');
  });

  test("Should require valid token", function() {
    expect(res.getStatus()).to.not.equal(401);
  });
}

docs {
  # Test de Autenticación (Solo Desarrollo)

  Este endpoint está disponible únicamente en entornos de desarrollo y sirve para verificar que el sistema de autenticación JWT está funcionando correctamente.

  ## ⚠️ Importante:
  - **Solo disponible en NODE_ENV !== 'production'**
  - No está disponible en producción por seguridad
  - Útil para debugging y desarrollo

  ## Requisitos:
  - Autenticación: Bearer Token requerido
  - Entorno: Solo desarrollo/testing
  - Rate Limiting: API estándar

  ## Respuesta Exitosa:
  ```json
  {
    "success": true,
    "message": "Autenticación funcionando correctamente",
    "user": {
      "id": 1,
      "email": "admin@saas-agendamiento.com",
      "nombre": "Super",
      "apellidos": "Admin",
      "rol": "super_admin",
      "organizacion_id": 1,
      "activo": true
    },
    "tenant": {
      "organizacion_id": 1,
      "nombre_organizacion": "SaaS Agendamiento Admin",
      "tenant_activo": true
    }
  }
  ```

  ## Casos de Uso:
  - Verificar que el JWT se está decodificando correctamente
  - Confirmar que el middleware de autenticación funciona
  - Validar que el contexto de tenant se establece correctamente
  - Debugging de problemas de autenticación

  ## Errores Comunes:
  - 401: Token inválido o expirado
  - 404: Endpoint no disponible (probablemente en producción)
  - 403: Token válido pero usuario sin permisos
}
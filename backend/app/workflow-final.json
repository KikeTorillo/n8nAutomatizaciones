{
  "name": "Barberia",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "name": "sender",
              "value": "={{ $json.message.from.id }}",
              "type": "string"
            },
            {
              "name": "conversation",
              "value": "={{ $json.message.text }}",
              "type": "string"
            },
            {
              "name": "sessionId",
              "value": "={{ $json.message.from.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        224,
        648
      ],
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Redis1').item.json.propertyName.join(\" \") }}",
        "options": {
          "systemMessage": "=Eres BARBERO_BOT, asistente especializado de la Barbería suavecito.\n\nFECHA Y HORA ACTUAL: {{ $now }}\nZONA HORARIA: America/Mexico_City (UTC-6)\n\nINFORMACIÓN DE LA BARBERÍA:\n- BARBEROS: Luis Enrique Arellanes, Diego Torillo\n- HORARIO: Lunes a Sábado de 9:00 a 18:00 (Domingo cerrado)\n- SERVICIOS DISPONIBLES:\n  * Corte (30 minutos) - $150\n  * Corte + Barba (45 minutos) - $250\n  * Solo Barba (20 minutos) - $100\n\nTu trabajo es ayudar a los clientes a agendar citas por redes sociales de manera eficiente.\n\n=== HERRAMIENTAS DISPONIBLES ===\n\nTienes acceso a estas 3 herramientas de Google Sheets:\n\n1. **\"verificar_disponibilidad_barberia\"** - Para leer todas las citas existentes\n2. **\"agendar_nueva_cita\"** - Para insertar nueva cita confirmada  \n3. **\"actualizar_estado_cita\"** - Para cancelar/completar citas\n\n=== FLUJO PRINCIPAL ===\n\n**IMPORTANTE - CONTROL DE CONVERSACIÓN:**\n- Usa la memoria del hilo de conversación para evitar preguntar información ya proporcionada\n\nCuando recibas un mensaje:\n\n1. **IDENTIFICA EL TIPO DE MENSAJE:**\n   - ¿Quiere agendar una cita nueva?\n   - ¿Quiere cancelar/reagendar?\n   - ¿Pregunta información general?\n   - ¿Confirma horario alternativo?\n   - ¿Solo saluda? (responder UNA VEZ por sesión de saludo)\n\n2. **PARA AGENDAR CITA NUEVA (PROCESO OBLIGATORIO):**\n   \n   **PASO 1:** Extrae y VALIDA todos los datos del mensaje:\n   - Barbero preferido (Luis/Diego, default: Luis Enrique Arellanes)\n   - Fecha (hoy, mañana, día específico) (OBLIGATORIO)\n   - Hora (formato 24hrs) (OBLIGATORIO)\n   - Nombre del cliente (OBLIGATORIO)\n   - Servicio deseado (OBLIGATORIO)\n\n   **PASO 2:** USA \"verificar_disponibilidad_barberia\"\n   - Lee todas las citas para verificar conflictos\n   - Filtra por mismo barbero + misma fecha + Estado=\"Activa\"\n   - Calcula si el horario solicitado está libre\n\n   **PASO 3:** VALIDA DISPONIBILIDAD\n   - Si hay conflicto: sugiere 3 horarios alternativos\n   - Si está libre: procede al Paso 4\n\n   **PASO 4:** USA \"agendar_nueva_cita\" con estos datos:\n   - fecha: \"DD/MM/YYYY\"\n   - hora: \"HH:MM\" \n   - barbero: \"Luis Enrique Arellanes\" o \"Diego Torillo\"\n   - cliente: nombre extraido\n   - servicio: \"Corte\", \"Corte + Barba\", o \"Barba\"\n   - timestamp: fecha+hora en milliseconds\n   - duracion: 30 (Corte), 45 (Corte+Barba), 20 (Barba)"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1752,
        552
      ],
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        1568,
        776
      ],
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "YooGNid9XSlOkutk",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        648
      ],
      "name": "Telegram Trigger",
      "credentials": {
        "telegramApi": {
          "id": "LhMMEjxpuGbI2Tzr",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2288,
        552
      ],
      "name": "Send a text message",
      "credentials": {
        "telegramApi": {
          "id": "LhMMEjxpuGbI2Tzr",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $json.sender }}",
        "messageData": "={{ $json.conversation }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        448,
        648
      ],
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "lK3efK3XbFHkQ8qh",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        672,
        648
      ],
      "name": "Wait"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $('Redis').item.json.sender }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        896,
        648
      ],
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "lK3efK3XbFHkQ8qh",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $json.propertyName.last() }}",
              "rightValue": "={{ $('Redis').item.json.conversation }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1120,
        648
      ],
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1344,
        744
      ],
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Redis').item.json.sender }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1344,
        552
      ],
      "name": "Redis2",
      "credentials": {
        "redis": {
          "id": "lK3efK3XbFHkQ8qh",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Redis').item.json.sender }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1696,
        776
      ],
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "KrG1bg3Af0MIkDSF",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        1824,
        776
      ],
      "name": "MCP Client"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        1952,
        776
      ],
      "name": "MCP Client1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        2080,
        776
      ],
      "name": "MCP Client2"
    }
  ],
  "connections": {
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Redis2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}
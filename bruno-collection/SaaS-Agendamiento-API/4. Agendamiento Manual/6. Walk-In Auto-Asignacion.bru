meta {
  name: Walk-In Auto-Asignación
  type: http
  seq: 6
}

post {
  url: {{baseUrl}}/api/{{apiVersion}}/citas/walk-in
  body: json
  auth: bearer
}

auth:bearer {
  token: {{token}}
}

body:json {
  {
    "nombre_cliente": "María Walk-in Prueba",
    "telefono": "+573009876543",
    "servicio_id": {{servicioId}},
    "tiempo_espera_aceptado": 5,
    "notas_walk_in": "Cliente walk-in sin cita previa. Auto-asignación de profesional."
  }
}

tests {
  test("Status 201 - Walk-in creado exitosamente", function() {
    expect(res.status).to.equal(201);
  });

  test("Cita tiene código auto-generado", function() {
    expect(res.body.data).to.have.property('codigo_cita');
    expect(res.body.data.codigo_cita).to.match(/^ORG\d+-\d{8}-\d{3}$/);
  });

  test("Cliente fue creado automáticamente", function() {
    expect(res.body.data).to.have.property('cliente_id');
    expect(res.body.data.cliente_id).to.be.greaterThan(0);
  });

  test("Profesional fue auto-asignado", function() {
    expect(res.body.data).to.have.property('profesional_id');
    expect(res.body.data.profesional_id).to.be.greaterThan(0);
  });

  test("Estado es confirmada", function() {
    expect(res.body.data.estado).to.equal('confirmada');
  });

  test("Origen es presencial", function() {
    expect(res.body.data.origen_cita).to.equal('presencial');
  });

  // Guardar variables
  if (res.status === 201) {
    bru.setEnvVar("walkInCitaId", res.body.data.id);
    bru.setEnvVar("walkInCodigoCita", res.body.data.codigo_cita);
    bru.setEnvVar("walkInClienteId", res.body.data.cliente_id);
    bru.setEnvVar("walkInProfesionalId", res.body.data.profesional_id);
  }
}

docs {
  # Walk-In con Auto-Asignación

  Crea una cita walk-in (sin cita previa) con auto-creación de cliente y auto-asignación de profesional.

  ## Flujos Soportados:

  ### 1. Cliente Nuevo + Profesional Auto-asignado
  ```json
  {
    "nombre_cliente": "Juan Pérez",
    "telefono": "+5491112345678",  // OPCIONAL
    "servicio_id": 1
  }
  ```

  **Nota**: El teléfono es OPCIONAL. Cliente puede registrarse solo con nombre.

  ### 2. Cliente Existente + Profesional Auto-asignado
  ```json
  {
    "cliente_id": 5,
    "servicio_id": 1
  }
  ```

  ### 3. Cliente Nuevo + Profesional Específico
  ```json
  {
    "nombre_cliente": "María González",
    "telefono": "+5491198765432",
    "profesional_id": 2,
    "servicio_id": 1
  }
  ```

  ### 4. Cliente Existente + Profesional Específico
  ```json
  {
    "cliente_id": 5,
    "profesional_id": 2,
    "servicio_id": 1
  }
  ```

  ## Body Parameters:

  **Cliente (elegir UNA opción):**
  - `cliente_id` (integer, optional) - ID de cliente existente
  - `nombre_cliente` (string, optional) - Nombre para crear cliente nuevo
  - `telefono` (string, optional) - Teléfono del cliente (OPCIONAL, puede ser NULL)

  **Profesional (opcional):**
  - `profesional_id` (integer, optional) - ID del profesional. Si no se envía, se auto-asigna el primer disponible

  **Servicio (requerido):**
  - `servicio_id` (integer, required) - ID del servicio

  **Opcionales:**
  - `tiempo_espera_aceptado` (integer, optional) - Minutos de espera aceptados (0-120)
  - `notas_walk_in` (string, optional) - Notas sobre el walk-in

  ## Validaciones:

  - ✅ Debe enviar `cliente_id` O `nombre_cliente` (no ambos)
  - ✅ `telefono` es OPCIONAL (permite walk-ins sin teléfono)
  - ✅ Si no envía `profesional_id`, se auto-asigna según disponibilidad
  - ✅ Verifica disponibilidad del profesional (no double-booking)
  - ✅ Crea cliente automáticamente si es nuevo
  - ✅ RLS: cita asociada a organización del usuario

  ## Lógica de Auto-Asignación de Profesional:

  1. Consulta profesionales disponibles para el servicio
  2. Ordena por disponibilidad (sin citas en curso)
  3. Asigna el primero disponible
  4. Si ninguno disponible → Error 400

  ## Respuesta Exitosa:

  ```json
  {
    "success": true,
    "data": {
      "id": 15,
      "codigo_cita": "ORG001-20251011-015",
      "cliente_id": 8,
      "profesional_id": 2,
      "servicio_id": 1,
      "estado": "confirmada",
      "origen_cita": "presencial",
      "hora_llegada": "2025-10-11T14:30:00Z",
      "hora_inicio_real": "2025-10-11T14:30:00Z"
    }
  }
  ```
}
